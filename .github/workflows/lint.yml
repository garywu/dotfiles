name: Lint Code

on:
  push:
    branches: [main, develop, 'feature/**', 'release/**', 'hotfix/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Lint All Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Nix Cache
        uses: cachix/cachix-action@v16
        with:
          name: nix-community
          skipPush: true

      - name: Install Dependencies
        run: |
          echo "Installing linting tools via Nix..."
          nix profile install \
            nixpkgs#gnumake \
            nixpkgs#shellcheck \
            nixpkgs#shfmt \
            nixpkgs#yamllint \
            nixpkgs#nodePackages.markdownlint-cli \
            nixpkgs#taplo \
            nixpkgs#nixpkgs-fmt \
            nixpkgs#statix \
            nixpkgs#fish

      - name: Lint Shell Scripts
        id: lint-shell
        run: |
          echo "::group::Shell Script Linting"
          make lint-shell || echo "::error::Shell script linting failed"
          echo "::endgroup::"
        continue-on-error: true

      - name: Lint Nix Files
        id: lint-nix
        run: |
          echo "::group::Nix File Linting"
          make lint-nix || echo "::error::Nix file linting failed"
          echo "::endgroup::"
        continue-on-error: true

      - name: Lint YAML Files
        id: lint-yaml
        run: |
          echo "::group::YAML File Linting"
          make lint-yaml || echo "::error::YAML file linting failed"
          echo "::endgroup::"
        continue-on-error: true

      - name: Lint Markdown Files
        id: lint-markdown
        run: |
          echo "::group::Markdown File Linting"
          make lint-markdown || echo "::error::Markdown file linting failed"
          echo "::endgroup::"
        continue-on-error: true

      - name: Lint TOML Files
        id: lint-toml
        run: |
          echo "::group::TOML File Linting"
          make lint-toml || echo "::error::TOML file linting failed"
          echo "::endgroup::"
        continue-on-error: true

      - name: Lint Fish Scripts
        id: lint-fish
        run: |
          echo "::group::Fish Script Linting"
          make lint-fish || echo "::error::Fish script linting failed"
          echo "::endgroup::"
        continue-on-error: true

      - name: Summary
        if: always()
        run: |
          echo "## Linting Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check each step's outcome
          if [[ "${{ steps.lint-shell.outcome }}" == "success" ]]; then
            echo "✅ Shell scripts passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Shell scripts failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ steps.lint-nix.outcome }}" == "success" ]]; then
            echo "✅ Nix files passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Nix files failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ steps.lint-yaml.outcome }}" == "success" ]]; then
            echo "✅ YAML files passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ YAML files failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ steps.lint-markdown.outcome }}" == "success" ]]; then
            echo "✅ Markdown files passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Markdown files failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ steps.lint-toml.outcome }}" == "success" ]]; then
            echo "✅ TOML files passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ TOML files failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ steps.lint-fish.outcome }}" == "success" ]]; then
            echo "✅ Fish scripts passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Fish scripts failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Fail the job if any linting failed
          if [[ "${{ steps.lint-shell.outcome }}" != "success" ]] || \
            [[ "${{ steps.lint-nix.outcome }}" != "success" ]] || \
            [[ "${{ steps.lint-yaml.outcome }}" != "success" ]] || \
            [[ "${{ steps.lint-markdown.outcome }}" != "success" ]] || \
            [[ "${{ steps.lint-toml.outcome }}" != "success" ]] || \
            [[ "${{ steps.lint-fish.outcome }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**❌ Linting failed! Please fix the issues above.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**✅ All linting checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional: Add problem matchers for better IDE integration
  setup-matchers:
    name: Setup Problem Matchers
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Setup ShellCheck Problem Matcher
        run: |
          echo "::add-matcher::.github/matchers/shellcheck.json"

      - name: Setup Markdownlint Problem Matcher
        run: |
          echo "::add-matcher::.github/matchers/markdownlint.json"
